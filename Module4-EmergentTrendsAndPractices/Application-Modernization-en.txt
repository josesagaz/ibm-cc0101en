(Music)
Many organizations have huge investments in existing applications
that are often siloed in legacy systems
and are very difficult and expensive to update and maintain.
Modernizing these applications can unlock great benefits for these organizations
such as accelerating their digital transformations,
enabling them to take advantage of new technologies and services,
and becoming more responsive to their customers' needs
and changing market dynamics.
Cloud computing is one of the three main ingredients in Application Modernization.
In the rest of this video we will see how,
and what else Application Modernization entails.
Hi, I'm Eric Minick, with IBM Cloud, and I want to talk about application modernization
and three huge transformations that have been going on together.
We've got three things going on, they're interrelated,
and this is what we're seeing, this change in how we're doing architecture, infrastructure,
and our ways of working - how we deliver.
And if we go back in time a little bit, we saw applications that were very monolithic,
they were running on physical servers and we used waterfall style development
where we'd have long plans and we'd say okay, this is gonna be our planning phase,
our development phase, our testing phase, and we could plan out a year as a project.
And that's really what we've gone away from.
So if we look at how most organizations are working today,
architecturally, they've got some sort of distributed architecture.
It's usually related to a service-oriented architecture;
the big buzzwords a few years ago,
but some sort of distributed architecture: we have a bunch of web services,
they're talking to each other, we've got some databases on the back end,
and then some front ends that kind of go through all that.
On an infrastructure level, they're running on some sort of a virtual machine, alright?
So, we said:
we could probably do better than having to order a new server every time we have a new service.
Let's virtualize this stuff, and we need a little more density along the way.
And from a way of working; you know, Agile development, pretty normal--
and then trying to figure out a little bit of what happens downstream.
So this takes us up to where a lot of teams are today, but not really where they're going.
And so if we look at that next phase.
We're taking another pass at this service-oriented architecture,
and really shrinking the sizes of the services,
taking advantage of the more dynamic infrastructure we have.
And we're calling these now microservices, right?
Microservices.
So we've got a microservice architecture, so very small, very focused services,
moving away from a lot of the heavyweight XML-based communication we saw in SOA,
towards more REST-based communication, things like that.
But same idea, let's keep breaking into smaller and smaller pieces.
We have more independence of what we ship.
More rigor in saying this service needs to be independent from another service,
so I can change these things by themselves.
On the infrastructure side: Cloud.
Cloud's pretty popular.
And this could be public cloud, this could also be private cloud.
I'm painting with a very broad brush when I say cloud here.
And then from a delivery, in a way of working: we could say that DevOps is really key.
And I would include in this, approaches like site reliability engineering, SRE.
More the ways of working we have today.
Now that that's fine and interesting.
But what do these things have to do with each other?
I'd argue that what we're really seeing is modernization in
in how the applications are delivered, and how they're built--and what they are.
And while you could walk into any large enterprise today
and you'll find someone who says "We are going through a cloud transformation."
You'll often find someone who says, "Yes, I'm in charge of leading the DevOps transformation."
You'll walk into enterprise architecture, they'll say, "Yes, we are pushing microservice architectures."
Individuals think that they're going through three separate transformations.
But they're really tied.
Right?
If I'm doing microservices, and I have new microservices all the time.
And in order to get a new microservice up and running,
I'm over here, and I have to order a new physical server,
and then rack and stack it a couple months later.
I'm not gonna get any time-to-market benefits.
The resilience benefits that I'm gonna normally look for
from microservices are gonna be modest, at best.
Microservices want cloud infrastructure. You want to be able to say,
I've got a new microservice; let me put it in a container and
just run that container right now and scale that dynamically.
Similarly, cloud really likes running microservices.
The benefits of being able to dynamically scale
are really cool when you have a lot of small things that you might need a few of or a lot of.
It's not as interesting when I've got a monolith that isn't even distributed. How do I scale that?
I get a bigger cloud server?
And then all of this is kind of, baking in this idea of speed and resiliency,
and DevOps brings that together.
The developers who have always wanted speed,
the operations people who've always wanted that resiliency.
They're going to be programming that cloud. Right?
The programmable infrastructure that cloud provides
needs operations people who understand resiliency--
but bring some of that development skill in.
And to really take advantage of these new infrastructures, the new architectures,
you need these new ways of working.
And you also are gonna say, "if this is going to give me time-to-market benefits,
I can't be back here, and say 'Yeah, we've got a one-year project plan that we're just gonna execute.'"
I need to be able to be more agile, and adapt in my planning and my responsiveness to the business.
I need to better wire up my applications so they can be more easily monitored and more resilient.
We have to have the application in a way that,
it knows when one of these services is failing, and we can spin up another.
So this is really, for me, fascinating, that you walk into these organizations everywhere,
and they're undergoing these three different transformations.
But they're always doing them together.
And when they don't - it doesn't quite work.
So you've got these three transformations going on at once.
And you'll hear us talk a lot about application modernization.
See it written across the top here?
When I think of application modernization, I think it's just this.
It's this transformation right here;
going from these kind of monoliths, or service-oriented architectures,
to microservices;
adopting Cloud;
modernizing our ways of working towards DevOps and SRE.
That's AppMod.
It's a really exciting time.
And it's really great when you're able to go after it in a holistic fashion.