0
00:00:00,000 --> 00:00:07,540
(Music)

1
00:00:07,540 --> 00:00:13,450
Simply put, a cloud native application is an application developed from the outset to

2
00:00:13,450 --> 00:00:15,650
to work only in the cloud environment,

3
00:00:15,650 --> 00:00:21,820
or an existing app that has been refactored and reconfigured with cloud native principles.

4
00:00:21,820 --> 00:00:26,780
A cloud native application consists of microservices working together as a whole

5
00:00:26,780 --> 00:00:29,020
to comprise an application,

6
00:00:29,020 --> 00:00:32,420
yet each can be independently scaled and iterated

7
00:00:32,420 --> 00:00:35,820
through automation and orchestration processes.

8
00:00:35,820 --> 00:00:39,660
These microservices are often packaged in containers,

9
00:00:39,660 --> 00:00:41,870
which are executable units of software

10
00:00:41,870 --> 00:00:47,180
in which the application code is packaged along with its libraries and dependencies

11
00:00:47,180 --> 00:00:49,910
so that it can be run from anywhere.

12
00:00:49,910 --> 00:00:55,200
The independence enables frequent, iterative improvement of cloud native applications,

13
00:00:55,200 --> 00:00:59,020
without disrupting the experience of end-users.

14
00:00:59,020 --> 00:01:04,080
Cloud native applications are unlike traditional, or monolithic, applications,

15
00:01:04,080 --> 00:01:07,140
that are built out of one huge piece of software;

16
00:01:07,140 --> 00:01:13,730
applications that tightly couple the user interface, business-logic layer, and data-layer.

17
00:01:13,730 --> 00:01:19,850
Let’s take the example of how a cloud native application might be used on a travel website.

18
00:01:19,850 --> 00:01:27,410
Each topic covered by the site—flights, hotels, cars, specials—is its own microservice.

19
00:01:27,410 --> 00:01:33,530
Each microservice may roll out new features independent of the other microservices.

20
00:01:33,530 --> 00:01:37,510
Specials and discounts can also scale out independently.

21
00:01:37,510 --> 00:01:43,690
While the travel site is presented to customers as a whole, each microservice remains independent

22
00:01:43,690 --> 00:01:49,340
and can be scaled or updated as needed without affecting other services.

23
00:01:49,340 --> 00:01:52,340
Whether creating a new cloud native application

24
00:01:52,340 --> 00:01:55,260
or modernizing an existing application,

25
00:01:55,260 --> 00:01:59,660
developers adhere to a consistent set of development principles:

26
00:01:59,660 --> 00:02:02,680
Follow the microservices architectural approach

27
00:02:02,680 --> 00:02:06,670
by breaking applications down to single-function microservices.

28
00:02:06,670 --> 00:02:13,150
Rely on containers for maximum flexibility, scalability, and portability.

29
00:02:13,150 --> 00:02:17,770
Adopt Agile methods that speed the creation and improvement process

30
00:02:17,770 --> 00:02:21,440
through quick, iterative updates based on user feedback.

31
00:02:21,440 --> 00:02:26,130
In this video, we’ll take a closer look at the key concepts of cloud native,

32
00:02:26,130 --> 00:02:28,970
its benefits, and use cases.

33
00:02:28,970 --> 00:02:32,870
Hi. I'm Andrea Crawford and I'm with IBM Cloud.

34
00:02:32,870 --> 00:02:36,110
Today we're going to talk about cloud native apps.

35
00:02:36,110 --> 00:02:41,940
In the heritage world, we have our lumpy, monolithic apps.

36
00:02:41,940 --> 00:02:49,900
And in the new world, we have our microservices living on the cloud.

37
00:02:51,040 --> 00:02:57,060
If we take a look at this diagram here, we see we have cloud infrastructure.

38
00:02:57,060 --> 00:03:02,230
This is your private, your public, and your enterprise infrastructure.

39
00:03:02,230 --> 00:03:11,690
Cloud native apps apply to hybrid and multicloud situations.

40
00:03:11,690 --> 00:03:14,860
We also have our scheduling and orchestration layer.

41
00:03:14,860 --> 00:03:22,730
This layer is all about control planes, like our kubernetes.

42
00:03:22,730 --> 00:03:26,130
We also have our application and data services layer.

43
00:03:26,130 --> 00:03:28,990
This layer is all about backing services,

44
00:03:28,990 --> 00:03:34,380
and being able to integrate our application code with existing services

45
00:03:34,380 --> 00:03:40,540
that may be available on other clouds, or even on-premise.

46
00:03:40,540 --> 00:03:42,700
We have our application runtimes:

47
00:03:42,700 --> 00:03:49,070
these are what were traditionally, or conventionally, known as middleware.

48
00:03:49,070 --> 00:03:53,520
And over here, well, that's where we have our cloud native apps.

49
00:03:53,520 --> 00:03:56,280
This is the sweet spot right up here.

50
00:03:56,280 --> 00:03:58,370
So our application code

51
00:03:58,370 --> 00:04:05,960
is actually designed, built, and delivered very differently for cloud native,

52
00:04:05,960 --> 00:04:11,320
than it would be for conventional, monolithic, lumpy apps over here.

53
00:04:11,320 --> 00:04:18,590
So let's talk a little bit about why cloud native apps can actually leverage benefits like:

54
00:04:18,590 --> 00:04:21,150
enabling innovation,

55
00:04:21,540 --> 00:04:25,160
business agility,

56
00:04:25,490 --> 00:04:30,980
and most importantly from a technology perspective,

57
00:04:30,980 --> 00:04:36,330
the commoditization of this solution stack over here.

58
00:04:36,330 --> 00:04:42,020
So as time has progressed and technologies have matured and emerged,

59
00:04:42,020 --> 00:04:48,460
a lot of the services are actually being refactored lower down in this stack.

60
00:04:48,460 --> 00:04:52,960
This means that core services are starting to have a lower center of gravity,

61
00:04:52,960 --> 00:04:57,450
freeing up innovation at this level over here.

62
00:04:57,450 --> 00:05:03,500
So, what are our use cases for when to build a cloud native app?

63
00:05:03,500 --> 00:05:06,520
*Everything*

64
00:05:06,520 --> 00:05:14,330
Everything that lives in the cloud should have a cloud native app design and approach.

65
00:05:14,330 --> 00:05:19,880
This means our application code needs to be instrumented with things like:

66
00:05:19,880 --> 00:05:23,620
standardized logging, standardized events,

67
00:05:23,620 --> 00:05:28,590
and being able to match those logging and events to a standard catalog,

68
00:05:28,590 --> 00:05:32,800
that multiple microservices and cloud native apps can use.

69
00:05:32,800 --> 00:05:36,610
The last thing we want to do is have our development squads

70
00:05:36,610 --> 00:05:39,840
have to figure out what their log and event messages should be.

71
00:05:39,840 --> 00:05:44,570
Let's standardize that, because we want to be able to commoditize that as well.

72
00:05:44,570 --> 00:05:47,900
We also need to have things like distributed tracing.

73
00:05:47,900 --> 00:05:52,370
When we get over into the microservices world over here,

74
00:05:52,370 --> 00:05:54,460
we have a lot of moving parts.

75
00:05:54,460 --> 00:05:59,300
This means we're going to need to leverage services core to the system, like:

76
00:05:59,300 --> 00:06:02,990
load balancing, service discovery, and routing.

77
00:06:02,990 --> 00:06:07,340
These are the kinds of things that are commoditized in this layer here,

78
00:06:07,340 --> 00:06:15,810
with things like Istio, and with the emergence of newer projects, like Knative.

79
00:06:15,810 --> 00:06:22,270
And so, if we were to recognize the benefits for cloud native apps and to sum it all up,

80
00:06:22,270 --> 00:06:28,300
we are all about enterprise and engineering at scale.

81
00:06:28,300 --> 00:06:33,020
In the next video we'll take a look at DevOps.

