0
00:00:00,000 --> 00:00:06,898
[MUSIC]

1
00:00:06,898 --> 00:00:11,383
Serverless is an approach to computing that offloads responsibility for

2
00:00:11,383 --> 00:00:15,869
common infrastructure management tasks such as scaling, scheduling,

3
00:00:15,869 --> 00:00:20,644
patching, and provisioning application stacks to cloud providers allowing

4
00:00:20,644 --> 00:00:24,043
developers to focus their time and effort on the code and

5
00:00:24,043 --> 00:00:27,761
business logic specific to their applications or process.

6
00:00:27,761 --> 00:00:32,500
Serverless doesn't mean there are no servers, only that the management of

7
00:00:32,500 --> 00:00:37,102
the underlying physical or virtual servers is removed from their users.

8
00:00:37,102 --> 00:00:42,707
The serverless computing environment allocates resources as needed for

9
00:00:42,707 --> 00:00:44,250
the applications.

10
00:00:44,250 --> 00:00:49,074
Let's look at some key attributes that distinguish serverless computing from

11
00:00:49,074 --> 00:00:50,518
other compute models.

12
00:00:50,518 --> 00:00:54,345
The serverless model requires no provisioning of servers,

13
00:00:54,345 --> 00:00:57,647
installation of application stacks and software or

14
00:00:57,647 --> 00:01:00,958
operation of the infrastructure by the developer.

15
00:01:00,958 --> 00:01:05,960
Serverless computing runs code only on-demand on a per request basis,

16
00:01:05,960 --> 00:01:10,563
scaling transparently with the number of requests being served.

17
00:01:10,563 --> 00:01:15,624
Serverless enables end users to pay only for resources being used,

18
00:01:15,624 --> 00:01:21,572
never paying for idle capacity, which is unlike virtual servers on the cloud,

19
00:01:21,572 --> 00:01:26,759
where end users pay for VMs as long as they are running, even if idle.

20
00:01:26,759 --> 00:01:31,743
Effectively serverless abstracts the infrastructure away from developers,

21
00:01:31,743 --> 00:01:34,493
code is executed as individual functions,

22
00:01:34,493 --> 00:01:38,080
where each function runs inside a stateless container.

23
00:01:38,080 --> 00:01:43,103
No prior execution context is required to serve a request, and

24
00:01:43,103 --> 00:01:48,430
with each new request, a new instance of the function is invoked.

25
00:01:48,430 --> 00:01:51,674
Let's look at a scenario, you could, for example,

26
00:01:51,674 --> 00:01:55,784
have a serverless platform between the front end of your website and

27
00:01:55,784 --> 00:02:00,618
your storage layer running individual functions, the serverless app could be

28
00:02:00,618 --> 00:02:05,190
translating text files and storing it in a cloud-based storage service.

29
00:02:05,190 --> 00:02:10,472
Using the front end of your website, you send text files to a serverless app.

30
00:02:10,472 --> 00:02:15,512
The app creates translations in different languages and then stores these

31
00:02:15,512 --> 00:02:20,480
translated files in a Cloud Storage and sends you their links back to you.

32
00:02:20,480 --> 00:02:25,385
Some of the key serverless computing services today include

33
00:02:25,385 --> 00:02:30,193
IBM Cloud functions, which is based on Apache OpenWhisk,

34
00:02:30,193 --> 00:02:33,766
AWS Lambda and Microsoft Azure functions.

35
00:02:33,766 --> 00:02:37,993
It is important to note that serverless may not be the best fit for

36
00:02:37,993 --> 00:02:40,195
all applications or scenarios.

37
00:02:40,195 --> 00:02:43,784
You need to evaluate application characteristics and

38
00:02:43,784 --> 00:02:49,018
ensure that the application is aligned to serverless architecture patterns.

39
00:02:49,018 --> 00:02:54,102
Applications that qualify for a serverless architecture include some of

40
00:02:54,102 --> 00:02:59,268
the following characteristics, short-running stateless functions,

41
00:02:59,268 --> 00:03:04,434
seconds or minutes, seasonal workloads with varying off peak and peaks,

42
00:03:04,434 --> 00:03:10,502
production volumetric data that shows too much idle time, event-based processing or

43
00:03:10,502 --> 00:03:14,937
asynchronous request processing for implementing use cases.

44
00:03:14,937 --> 00:03:18,311
Microservices that can be built as functions that are stateless.

45
00:03:18,311 --> 00:03:23,789
Serverless architectures are well suited for use cases around, data and

46
00:03:23,789 --> 00:03:28,750
event processing, IoT, microservices, and mobile back ends.

47
00:03:28,750 --> 00:03:34,015
Given its inherent and automatic scaling, rapid provisioning and a pricing

48
00:03:34,015 --> 00:03:39,685
model that does not change for idle time, supporting microservices architecture

49
00:03:39,685 --> 00:03:44,794
has become one of the most common use cases of serverless computing today.

50
00:03:44,794 --> 00:03:49,452
Serverless is well suited to working with structured text, audio,

51
00:03:49,452 --> 00:03:53,628
image, and video data around tasks such as data enrichment,

52
00:03:53,628 --> 00:03:58,207
transformation, validation, and cleansing, PDF processing,

53
00:03:58,207 --> 00:04:03,214
audio normalization, thumbnail generation, and video transcoding.

54
00:04:03,214 --> 00:04:06,805
Parallel tasks such as data search and processing and

55
00:04:06,805 --> 00:04:11,764
genome processing are also well suited to be run on a serverless runtime.

56
00:04:11,764 --> 00:04:17,475
Serverless is also well suited for working with all sorts of data stream ingestions,

57
00:04:17,475 --> 00:04:21,996
including business data streams, IoT sensor data, log data, and

58
00:04:21,996 --> 00:04:23,684
financial market data.

59
00:04:23,684 --> 00:04:30,527
And finally, let's look at some challenges worth considering about serverless.

60
00:04:30,527 --> 00:04:34,627
Serverless workloads are designed to scale up and down in response to workload.

61
00:04:34,627 --> 00:04:38,953
But for workloads characterized by long-running processes,

62
00:04:38,953 --> 00:04:44,812
managing a traditional server environment might be simpler and more cost effective.

63
00:04:44,812 --> 00:04:49,438
The serverless application architecture can be vendor dependent, and

64
00:04:49,438 --> 00:04:52,317
so there is a potential for vendor lock-in,

65
00:04:52,317 --> 00:04:57,097
particularly involving platform capabilities such as authentication,

66
00:04:57,097 --> 00:05:00,757
scaling, monitoring, or configuration management.

67
00:05:00,757 --> 00:05:05,893
Because serverless architectures scale up and down in response to workload,

68
00:05:05,893 --> 00:05:10,423
they also sometimes need to start up from zero to serve a new request.

69
00:05:10,423 --> 00:05:15,496
For certain applications, this delay isn't much of an impact, but for something

70
00:05:15,496 --> 00:05:20,509
like a low latency financial application, this delay wouldn't be acceptable.

71
00:05:20,509 --> 00:05:22,009
[MUSIC]

